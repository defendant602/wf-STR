#!/usr/bin/env nextflow

// Developer notes
// 
// This template workflow provides a basic structure to copy in order
// to create a new workflow. Current recommended pratices are:
//     i) create a simple command-line interface.
//    ii) include an abstract workflow scope named "pipeline" to be used
//        in a module fashion
//   iii) a second concreate, but anonymous, workflow scope to be used
//        as an entry point when using this workflow in isolation.

import groovy.json.JsonBuilder
nextflow.enable.dsl = 2

//params.out_dir     = "result"
//params.fastq   = "$baseDir/test_data/test.fastq"
//params.reference_genome   = "$baseDir/data/human.hg19.fasta" 
//params.target_STR_region      = "$baseDir/data/target_STR.txt"
//params.minimap2_addition_para    = "-L --MD -Y -a -x map-ont --secondary=no"
//params.samplename = "sample"
//params.reprot_name = "report"
//params.disable_ping = "false"


log.info """\
C A L L I N G S  -  N F    v 2.1 
================================
out_dir : $params.out_dir
fastq : $params.fastq
reference_genome : $params.reference_genome 
target_STR_region : $params.target_STR_region
minimap2_addition_para : $params.minimap2_addition_para
samplename : $params.samplename
report_name : $params.reprot_name
disable_ping : $params.disable_ping
"""

process minimap2 {
    // concatenate fastq and fastq.gz in a dir

    label "aligment"
    cpus 4
    input:
        file(fastq)
        val(samplename)
    output:
        stdout
    shell:
    """
       echo ${fastq}
    """
}

process grandSTR {
    // concatenate fastq and fastq.gz in a dir

    label "STRdetection"
    cpus 4
    input:
        file(reference_genome)
        val(report_name)

    output:
        stdout
    shell:
    """
       echo ${reference_genome}
	
    """
}

process getParams {
    label "wfSTR"
    cpus 1
    output:
        path "params.json"
    script:
        def paramsJSON = new JsonBuilder(params).toPrettyString()
    """
    # Output nextflow params object to JSON
    echo '$paramsJSON' > params.json
    """
}

process output {
    // publish inputs to output directory
    label "wfSTR"
    publishDir "${params.out_dir}", mode: 'copy', pattern: "*"
    input:
        path fname
    output:
        path fname
    """
    echo "Writing output files."
    """
}

workflow {
    //reads_ch = Channel.fromPath(params.fastq)
    minimap2(params.fastq, params.samplename)
    grandSTR(params.reference_genome, params.report_name)

    //pipeline(samples)
    //output(pipeline.out.results)

}
